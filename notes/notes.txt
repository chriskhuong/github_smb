CHECKS FOR FRIENDLY FIRE
1.scr_attackState
2.obj_damage


THINGS TO UNCOMMENT
1.obj_player's animation end

* - search for an alternative to physics_apply_impulse function so we don't have to use physics

FOR PLAYER LOBBY USE A LIST INSTEAD OF AN ARRAY for easy object removal and Array Re-ordering

* - Fix collisions

* - Update player input

* - Set up some sort of color select interface for the characters

have color select also change the target color

* - get rid of the actual arm objects and incorporate them into the actual player, same with the target

* - pistols not properly shooting from their gun offset, other guns are

*- go back into obj_lifeFormParent and re-add collision with obj_solidParent (took this out for the sake of PAX)
//DEPTH SYSTEM, which we already have implemented

//ADVANCED BOSS TUTORIAL stopped at the fireball section, not the biggest fan of this tutorial though
//this tutorial is seriously garbage, bad syntax

//DEBUGGING
show_debug_overlay(true);

*Change collision checking on the bullets, instead of having all of the bullets check for a lifeform to hit, just have the lifeforms check for the bullets

*sprite groups to keep texture swaps low

****************************************************************

/// @description  Setup Steering Behaviour Support


//Non-Steering behaviour stuff
my_color = c_gray;

image_xscale = 3;
image_yscale = image_xscale;


//Steering behaviour stuff
position = vect2(x,y); // will be used to update xy
velocity = vect2(0,0);
steering = vect2(0,0); // desired velocity

max_speed = 4;
max_force = 0.7; // How fast it turns

// Only needed if the object will follow paths
my_path = path_loop;
my_path_point = irandom(path_get_number(my_path)-1); // Choose a random point on the path
my_path_dir = 1; // 1 = forwards, -1 = backwards

****************************************************************

/// @description  Step Behaviour Usage

// reset steering
steering = vect2(0,0);


//## Steering Behaviours go below here ##//

// Add like this. (First one doesn't need the vect_add)
//steering = vect_add(steering, sb_#behaviour#(argument,stuff,blah));

//steering = vect_add(steering, sb_seek(mouse_x, mouse_y, 1));
//steering = vect_add(steering, sb_seek_arrive(mouse_x,mouse_y,256,1));
steering = vect_add(steering, sb_wander(128,128,180,1));
//steering = vect_add(steering, sb_flee(mouse_x,mouse_y,1));
//steering = vect_add(steering, sb_pursuit(obj_master_drone,1));
//steering = vect_add(steering, sb_evade(obj_master_drone,1));
//steering = vect_add(steering, sb_path_loop(my_path,30,my_path_dir,1));
steering = vect_add(steering, sb_alignment(par_drone,128,1));
steering = vect_add(steering, sb_separation(par_drone,64,3));
steering = vect_add(steering, sb_cohesion(par_drone,184,2));
steering = vect_add(steering, sb_avoid_collision(par_obstacle,80,30,1));

//## Steering Behaviours go above here ##//


//Limit steering by max_force
steering = vect_truncate(steering, max_force); 

// Limit velocity to max_speed
velocity = vect_truncate(vect_add(velocity, steering),max_speed); 

//Add velocity to position
position = vect_add(position, velocity);

//update xy
x = position[1];
y = position[2];

image_angle = vect_direction(velocity);

///Screen Wrap

if position[1] > room_width position[1] = 0;
if position[2] > room_height position[2] = 0;
if position[1] < 0 position[1] = room_width;
if position[2] < 0 position[2] = room_height;